> createTestDatabase

> scalikejdbcGenEcho address_street

> scalikejdbcGenEcho programmers
-$ exists src/main/scala/app/models/Programmers.scala
-$ exists src/test/scala/app/models/ProgrammersSpec.scala
> scalikejdbcGenEcho programmers Programmer
-$ exists src/main/scala/app/models/Programmer.scala
-$ exists src/test/scala/app/models/ProgrammerSpec.scala

> scalikejdbcGenForce programmers
$ exists src/main/scala/app/models/Programmers.scala
$ exists src/test/scala/app/models/ProgrammersSpec.scala
> scalikejdbcGenForce programmers Programmer
$ exists src/main/scala/app/models/Programmer.scala
$ exists src/test/scala/app/models/ProgrammerSpec.scala

> scalikejdbcGenAll
-$ exists src/main/scala/app/models/ProgrammersView.scala
-$ exists src/test/scala/app/models/ProgrammersViewSpec.scala

> scalikejdbcGenForce programmers_view
$ exists src/main/scala/app/models/ProgrammersView.scala
$ exists src/test/scala/app/models/ProgrammersViewSpec.scala

$ delete src/main/scala/app/models/ProgrammersView.scala
$ delete src/test/scala/app/models/ProgrammersViewSpec.scala

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(view = true)}
> scalikejdbcGenAll
$ exists src/main/scala/app/models/ProgrammersView.scala
$ exists src/test/scala/app/models/ProgrammersViewSpec.scala

$ sleep 2000
> scalikejdbcGenForce programmers
$ newer src/main/scala/app/models/Programmers.scala src/main/scala/app/models/Programmer.scala
> + compile
> + Test/compile
> + testOnly app.models.ProgrammersTest
> + testOnly app.models.Issue810

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(template ="interpolation")}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(testTemplate ="specs2unit")}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest
> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(template ="queryDsl")}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(testTemplate ="specs2acceptance")}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest
> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(template ="interpolation")}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest


> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(autoConstruct = true)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(defaultAutoSession = false)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile
> + testOnly app.models.ProgrammersTest

$ delete src/test/scala/ProgrammersTest.scala

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(dateTimeClass = scalikejdbc.mapper.DateTimeClass.JodaDateTime)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(dateTimeClass = scalikejdbc.mapper.DateTimeClass.OffsetDateTime)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(dateTimeClass = scalikejdbc.mapper.DateTimeClass.LocalDateTime)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(returnCollectionType = scalikejdbc.mapper.ReturnCollectionType.Vector)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(returnCollectionType = scalikejdbc.mapper.ReturnCollectionType.Array)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(returnCollectionType = scalikejdbc.mapper.ReturnCollectionType.Factory)}
> scalikejdbcGenEcho programmers
> scalikejdbcGenForce programmers
> + Test/compile

> set (Compile / scalikejdbcGeneratorSettings) ~= {_.copy(template ="invalid template name")}
-> scalikejdbcGenEcho programmers
-> scalikejdbcGenForce programmers

> generateCodeForIssue339
> compile


> set (Compile / scalikejdbcGeneratorSettings) ~= {c => c.copy(tableNameToClassName = c.tableNameToClassName.compose(_ * 2), template ="interpolation")}
> scalikejdbcGenAll
$ exists src/main/scala/app/models/Programmersprogrammers.scala
$ exists src/test/scala/app/models/ProgrammersprogrammersSpec.scala

$ delete src/main/scala/app/models/Programmersprogrammers.scala
$ delete src/test/scala/app/models/ProgrammersprogrammersSpec.scala
-$ exists src/main/scala/app/models/Programmersprogrammers.scala
-$ exists src/test/scala/app/models/ProgrammersprogrammersSpec.scala

> scalikejdbcGen programmers
$ exists src/main/scala/app/models/Programmersprogrammers.scala
$ exists src/test/scala/app/models/ProgrammersprogrammersSpec.scala
